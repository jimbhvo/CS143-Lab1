package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate myp;
    private DbIterator mychild1;
    private DbIterator mychild2;
    private Tuple nextTuple;
    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
    	myp = p;
    	mychild1 = child1;
    	mychild2 = child2;
    	nextTuple = null;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return myp;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return mychild1.getTupleDesc().getFieldName(myp.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
    	return mychild2.getTupleDesc().getFieldName(myp.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(mychild1.getTupleDesc(), mychild2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
    	mychild1.open();
    	mychild2.open();
    }

    public void close() {
        // some code goes here
    	mychild1.close();
    	mychild2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	mychild1.rewind();
    	mychild2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
    	// Keep trying til we run out
    	while(true)
    	{
    		//If there's no more tuple in first iterator, then no match
    		if (!mychild1.hasNext()) {
    	        return null;
    	      }
    		
    		//Otherwise we try matches
    		while (mychild2.hasNext() && nextTuple != null)
    		{
    			Tuple sometuple = mychild2.next();
    			
    			//if match fits, we return it
    			if (myp.filter(nextTuple, sometuple))
    			{
    				Tuple returnTuple = new Tuple(getTupleDesc());
    				
    				int index = nextTuple.getTupleDesc().numFields();
                    
                    for(int i = 0; i < nextTuple.getTupleDesc().numFields(); i ++){
                            returnTuple.setField(i, nextTuple.getField(i));
                    }
                    
                    for(int j = 0; j < sometuple.getTupleDesc().numFields(); j++){
                            returnTuple.setField(j + index, sometuple.getField(j));
                    }
                    
                    return returnTuple;
    			}
    		}
    		
    		//reset second tuple to the start
    		mychild2.rewind();
    		
    		//set first tuple to the next
    		nextTuple = mychild1.next();
    	}
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return new DbIterator[]{mychild1, mychild2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
    	mychild1 = children[0];
    	mychild2 = children[1];
    }

}
